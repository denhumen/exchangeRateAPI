// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0--rc3
// source: exchange_rate.proto

package exchange_rate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExchangeRateService_GetCurrentRate_FullMethodName   = "/exchangeRateAPI.ExchangeRateService/GetCurrentRate"
	ExchangeRateService_SubscribeEmail_FullMethodName   = "/exchangeRateAPI.ExchangeRateService/SubscribeEmail"
	ExchangeRateService_UnsubscribeEmail_FullMethodName = "/exchangeRateAPI.ExchangeRateService/UnsubscribeEmail"
)

// ExchangeRateServiceClient is the client API for ExchangeRateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeRateServiceClient interface {
	GetCurrentRate(ctx context.Context, in *GetRateRequest, opts ...grpc.CallOption) (*GetRateResponse, error)
	SubscribeEmail(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	UnsubscribeEmail(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
}

type exchangeRateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeRateServiceClient(cc grpc.ClientConnInterface) ExchangeRateServiceClient {
	return &exchangeRateServiceClient{cc}
}

func (c *exchangeRateServiceClient) GetCurrentRate(ctx context.Context, in *GetRateRequest, opts ...grpc.CallOption) (*GetRateResponse, error) {
	out := new(GetRateResponse)
	err := c.cc.Invoke(ctx, ExchangeRateService_GetCurrentRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRateServiceClient) SubscribeEmail(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, ExchangeRateService_SubscribeEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRateServiceClient) UnsubscribeEmail(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, ExchangeRateService_UnsubscribeEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeRateServiceServer is the server API for ExchangeRateService service.
// All implementations must embed UnimplementedExchangeRateServiceServer
// for forward compatibility
type ExchangeRateServiceServer interface {
	GetCurrentRate(context.Context, *GetRateRequest) (*GetRateResponse, error)
	SubscribeEmail(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	UnsubscribeEmail(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	mustEmbedUnimplementedExchangeRateServiceServer()
}

// UnimplementedExchangeRateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeRateServiceServer struct {
}

func (UnimplementedExchangeRateServiceServer) GetCurrentRate(context.Context, *GetRateRequest) (*GetRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentRate not implemented")
}
func (UnimplementedExchangeRateServiceServer) SubscribeEmail(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeEmail not implemented")
}
func (UnimplementedExchangeRateServiceServer) UnsubscribeEmail(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeEmail not implemented")
}
func (UnimplementedExchangeRateServiceServer) mustEmbedUnimplementedExchangeRateServiceServer() {}

// UnsafeExchangeRateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeRateServiceServer will
// result in compilation errors.
type UnsafeExchangeRateServiceServer interface {
	mustEmbedUnimplementedExchangeRateServiceServer()
}

func RegisterExchangeRateServiceServer(s grpc.ServiceRegistrar, srv ExchangeRateServiceServer) {
	s.RegisterService(&ExchangeRateService_ServiceDesc, srv)
}

func _ExchangeRateService_GetCurrentRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateServiceServer).GetCurrentRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeRateService_GetCurrentRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateServiceServer).GetCurrentRate(ctx, req.(*GetRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRateService_SubscribeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateServiceServer).SubscribeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeRateService_SubscribeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateServiceServer).SubscribeEmail(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRateService_UnsubscribeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateServiceServer).UnsubscribeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeRateService_UnsubscribeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateServiceServer).UnsubscribeEmail(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangeRateService_ServiceDesc is the grpc.ServiceDesc for ExchangeRateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeRateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchangeRateAPI.ExchangeRateService",
	HandlerType: (*ExchangeRateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentRate",
			Handler:    _ExchangeRateService_GetCurrentRate_Handler,
		},
		{
			MethodName: "SubscribeEmail",
			Handler:    _ExchangeRateService_SubscribeEmail_Handler,
		},
		{
			MethodName: "UnsubscribeEmail",
			Handler:    _ExchangeRateService_UnsubscribeEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exchange_rate.proto",
}
